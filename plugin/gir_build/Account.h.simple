
#ifndef XACC_ACCOUNT_H
#define XACC_ACCOUNT_H

//#include "qof.h"
//#include "gnc-engine.h"
//#include "policy.h"

// we need to know this is a subclass of QofInstance which itself
// is a GObject

// lets try new tack - define all types here

#include "qofinstance.h"

#include "qofbook.h"


#ifdef __cplusplus
extern "C" {
#endif
//typedef gnc_numeric (*xaccGetBalanceFn)( const Account *account );

//typedef gnc_numeric (*xaccGetBalanceInCurrencyFn) (
//    const Account *account, const gnc_commodity *report_commodity,
//    gboolean include_children);

//typedef gnc_numeric (*xaccGetBalanceAsOfDateFn) (
//    Account *account, time64 date);

//typedef void (*AccountCb)(Account *a, gpointer data);
//typedef gpointer (*AccountCb2)(Account *a, gpointer data);


// copied from AccountP.h

struct account_s
{
    QofInstance inst;
};

// copied from gnc-engine.h

typedef struct account_s             Account;


typedef struct
{
    QofInstanceClass parent_class;
} AccountClass;

//typedef struct
//{
//    Account *acc;
//    QofBook *book;
//} GncImportMatchMap;

/* --- type macros --- */
#define GNC_TYPE_ACCOUNT            (gnc_account_get_type ())
#define GNC_ACCOUNT(o)              \
     (G_TYPE_CHECK_INSTANCE_CAST ((o), GNC_TYPE_ACCOUNT, Account))
#define GNC_ACCOUNT_CLASS(k)        \
     (G_TYPE_CHECK_CLASS_CAST((k), GNC_TYPE_ACCOUNT, AccountClass))
#define GNC_IS_ACCOUNT(o)           \
     (G_TYPE_CHECK_INSTANCE_TYPE ((o), GNC_TYPE_ACCOUNT))
#define GNC_IS_ACCOUNT_CLASS(k)     \
     (G_TYPE_CHECK_CLASS_TYPE ((k), GNC_TYPE_ACCOUNT))
#define GNC_ACCOUNT_GET_CLASS(o)    \
     (G_TYPE_INSTANCE_GET_CLASS ((o), GNC_TYPE_ACCOUNT, AccountClass))
/**
 * gnc_account_get_type:
 *
 *  Returns the GType type system description of the Account class.
 *
 * This must not be confused with the \ref GNCAccountType as returned
 * by xaccAccountGetType().
 */
GType gnc_account_get_type(void);

/* 
 * The account types are used to determine how the transaction data
 * in the account is displayed.   These values can be safely changed
 * from one release to the next.  Note that if values are added,
 * the file IO translation routines need to be updated. Note
 * also that GUI code depends on these numbers.
 *
 * @note ***IMPORTANT***: If you do change the enumeration names (not the
 * numbers), you need to update xaccAccountTypeEnumAsString --- used
 * for text file exports */

typedef enum
{
    ACCT_TYPE_INVALID = -1, /* < Not a type */
    ACCT_TYPE_NONE = -1,/* < Not a type */

    ACCT_TYPE_BANK = 0,	/* < The bank account type denotes a savings
			 *   or checking account held at a bank.
			 *   Often interest bearing. */
    ACCT_TYPE_CASH = 1,	/* < The cash account type is used to denote a
			 *   shoe-box or pillowcase stuffed with *
			 *   cash. */
    ACCT_TYPE_CREDIT = 3,	/* < The Credit card account is used to denote
			 *   credit (e.g. amex) and debit (e.g. visa,
			 *   mastercard) card accounts */
    ACCT_TYPE_ASSET = 2,	/* < asset (and liability) accounts indicate
			 *   generic, generalized accounts that are
			 *   none of the above. */
    ACCT_TYPE_LIABILITY = 4,/* < liability (and asset) accounts indicate
			   *   generic, generalized accounts that are
			   *   none of the above. */
    ACCT_TYPE_STOCK = 5,	/* < Stock accounts will typically be shown in
			 *   registers which show three columns:
			 *   price, number of shares, and value. */
    ACCT_TYPE_MUTUAL = 6,	/* < Mutual Fund accounts will typically be
			 *   shown in registers which show three
			 *   columns: price, number of shares, and
			 *   value. */
    ACCT_TYPE_CURRENCY = 7,/* < The currency account type indicates that
			  *   the account is a currency trading
			  *   account.  In many ways, a currency
			  *   trading account is like a stock *
			  *   trading account. It is shown in the
			  *   register with three columns: price,
			  *   number of shares, and value. Note:
			  *   Since version 1.7.0, this account is *
			  *   no longer needed to exchange currencies
			  *   between accounts, so this type is
			  *   DEPRECATED. */
    ACCT_TYPE_INCOME = 8,	/* < Income accounts are used to denote
			 *   income */

    ACCT_TYPE_EXPENSE = 9,/* < Expense accounts are used to denote
			 *   expenses. */

    ACCT_TYPE_EQUITY = 10,/* < Equity account is used to balance the
			 *   balance sheet. */

    ACCT_TYPE_RECEIVABLE = 11,/* < A/R account type */

    ACCT_TYPE_PAYABLE = 12,  /* < A/P account type */

    ACCT_TYPE_ROOT = 13, /* < The hidden root account of an account tree. */

    ACCT_TYPE_TRADING = 14, /* < Account used to record multiple commodity transactions.
                           *   This is not the same as ACCT_TYPE_CURRENCY above.
                           *   Multiple commodity transactions have splits in these
                           *   accounts to make the transaction balance in each
                           *   commodity as well as in total value.  */

    NUM_ACCOUNT_TYPES = 15,  /* < stop here; the following types
			    * just aren't ready for prime time */

    /* bank account types */
    ACCT_TYPE_CHECKING = 15, /* < bank account type -- don't use this
			    *   for now, see NUM_ACCOUNT_TYPES  */
    ACCT_TYPE_SAVINGS = 16, /* < bank account type -- don't use this for
			   *   now, see NUM_ACCOUNT_TYPES  */
    ACCT_TYPE_MONEYMRKT = 17, /* < bank account type -- don't use this
			     *   for now, see NUM_ACCOUNT_TYPES  */
    ACCT_TYPE_CREDITLINE = 18, /* < line of credit -- don't use this for
			      *   now, see NUM_ACCOUNT_TYPES  */
    ACCT_TYPE_LAST
} GNCAccountType;



/**
 * AccountConstructors:
 * @name Account Constructors, Edit/Commit, Comparison
 @{
 */

/**
 * xaccMallocAccount: (constructor) :
 * return: (transfer full)
 *
 * Constructor
 */
Account * xaccMallocAccount (QofBook *book);

/**
 * gnc_account_create_root:
 * @book:
 * return : (transfer full)
 *
 * Create a new root level account.
 */
Account * gnc_account_create_root (QofBook *book);

/**
 * xaccCloneAccount: (constructor) :
 * @source:
 * @book:
 * return : (transfer full): 
 *
 *  The xaccCloneAccount() routine makes a simple copy of the
 *  indicated account, placing it in the indicated book.  It copies
 *  the account type, name, description, and the kvp values;
 *  it does not copy splits/transactions.  The book should have
 *  a commodity table in it that has commodities with the same
 *  unique name as the ones being copied in the account (the
 *  commodities in the clone will be those from the book).
 */
Account * xaccCloneAccount (const Account *source, QofBook *book);

/**
 * xaccAccountBeginEdit: (method)
 * @account:
 *
 *  The xaccAccountBeginEdit() subroutine is the first phase of
 *    a two-phase-commit wrapper for account updates.
 */
void xaccAccountBeginEdit (Account *account);

/**
 * xaccAccountCommitEdit: (method)
 * @account:
 *
 *  ThexaccAccountCommitEdit() subroutine is the second phase of
 *    a two-phase-commit wrapper for account updates.
 */
void xaccAccountCommitEdit (Account *account);

/**
 * xaccAccountDestroy: (method)
 * @account:
 *
 *  The xaccAccountDestroy() routine can be used to get rid of an
 *    account.  The account should have been opened for editing
 *    (by calling xaccAccountBeginEdit()) before calling this routine.
 */
void xaccAccountDestroy (Account *account);

/**
 * xaccAccountEqual: (method)
 * @a:
 * @b:
 * @check_guids
 *
 *  Compare two accounts for equality - this is a deep compare.
 */
gboolean xaccAccountEqual(const Account *a, const Account* b,
                          gboolean check_guids);

/**
 * xaccAccountOrder: (method)
 * @account_1:
 * @account_2:
 *
 *  The xaccAccountOrder() subroutine defines a sorting order on
 *    accounts.  It takes pointers to two accounts, and returns an int < 0 if
 *    the first account is "less than" the second, returns an int > 0 if the
 *    first is "greater than" the second, and 0 if they are equal.  To
 *    determine the sort order, first the account codes are compared,
 *    and if these are equal, then account types, then account
 *    names. If still equal, it compares GUID to ensure that there
 *    aren't any ties.
 */
int xaccAccountOrder (const Account *account_1, const Account *account_2);

/*  @} */



/*  @name Account parameter names
 @{
*/
#define ACCOUNT_KVP		"kvp"
#define ACCOUNT_NAME_		"name"
#define ACCOUNT_CODE_		"code"
#define ACCOUNT_DESCRIPTION_	"desc"
#define ACCOUNT_COLOR_		"color"
#define ACCOUNT_FILTER_		"filter"
#define ACCOUNT_SORT_ORDER_	"sort-order"
#define ACCOUNT_SORT_REVERSED_ "sort-reversed"
#define ACCOUNT_NOTES_		"notes"
#define ACCOUNT_BALANCE_	"balance"
#define ACCOUNT_CLEARED_	"cleared"
#define ACCOUNT_RECONCILED_	"reconciled"
#define ACCOUNT_PRESENT_	"present"
#define ACCOUNT_FUTURE_MINIMUM_ "future-minimum"
#define ACCOUNT_TAX_RELATED	"tax-related-p"
#define ACCOUNT_TYPE_		"account-type"
#define ACCOUNT_SCU		"smallest-commodity-unit"
#define ACCOUNT_NSCU		"non-standard-scu"
#define ACCOUNT_PARENT		"parent-account"

/*  @} */

/*  This is the type-override when you want to match all accounts.  Used
 * in the gnome-search parameter list.  Be careful when you use this. */
#define ACCOUNT_MATCH_ALL_TYPE	"account-match-all"

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* XACC_ACCOUNT_H */
/*  @} */
/*  @} */
