diff --git a/src/app-utils/date-utilities.scm b/libgnucash/app-utils/date-utilities.scm
index 03faa8fa8..1e6b2f6a8 100644
--- a/src/app-utils/date-utilities.scm
+++ b/libgnucash/app-utils/date-utilities.scm
@@ -20,30 +20,12 @@
 ;; 51 Franklin Street, Fifth Floor    Fax:    +1-617-542-2652
 ;; Boston, MA  02110-1301,  USA       gnu@gnu.org
 
+
 (use-modules (gnucash core-utils)
-             (gnucash printf)
              (gnucash gettext))
 
 (define gnc:reldate-list '())
 
-(define (gnc:timepair->secs tp)
-  (inexact->exact 
-   (+ (car tp)
-      (/ (cdr tp) 1000000000))))
-
-(define (gnc:secs->timepair secs)
-  (cons secs 0))
-
-(define (gnc:timepair->date tp)
-  (gnc-localtime (gnc:timepair->secs tp)))
-
-(define (gnc:date->timepair date)
-  (gnc:secs->timepair (gnc-mktime date)))
-
-(define (gnc:timepair? date)
-  (and (number? (car date))
-       (number? (cdr date))))
-
 ;; get stuff from localtime date vector
 (define (gnc:date-get-year datevec)
   (+ 1900 (tm:year datevec)))
@@ -58,39 +40,38 @@
   (+ (tm:wday datevec) 1))
 ;; jan 1 == 1
 (define (gnc:date-get-week datevec)
-  (gnc:date-to-week (gnc:timepair->secs
-		     (gnc:timepair-start-day-time
-		      (gnc:date->timepair datevec)))))
+  (gnc:date-to-week (gnc:time64-start-day-time
+                     (gnc-mktime datevec))))
 
 (define (gnc:date-get-year-day datevec)
   (+ (tm:yday datevec) 1))
 
-(define (gnc:timepair-get-year tp)
-  (gnc:date-get-year (gnc:timepair->date tp)))
+(define (gnc:time64-get-year t64)
+  (gnc:date-get-year (gnc-localtime t64)))
 
-(define (gnc:timepair-get-quarter tp)
-  (gnc:date-get-quarter (gnc:timepair->date tp)))
+(define (gnc:time64-get-quarter t64)
+  (gnc:date-get-quarter (gnc-localtime t64)))
 
-(define (gnc:timepair-get-month-day tp)
-  (gnc:date-get-month-day (gnc:timepair->date tp)))
+(define (gnc:time64-get-month-day t64)
+  (gnc:date-get-month-day (gnc-localtime t64)))
 
-(define (gnc:timepair-get-month tp)
-  (gnc:date-get-month (gnc:timepair->date tp)))
+(define (gnc:time64-get-month t64)
+  (gnc:date-get-month (gnc-localtime t64)))
 
-(define (gnc:timepair-get-week-day tp)
-  (gnc:date-get-week-day (gnc:timepair->date tp)))
+(define (gnc:time64-get-week-day t64)
+  (gnc:date-get-week-day (gnc-localtime t64)))
 
-(define (gnc:timepair-get-week tp)
-  (gnc:date-get-week (gnc:timepair->date tp)))
+(define (gnc:time64-get-week t64)
+  (gnc:date-get-week (gnc-localtime t64)))
 
-(define (gnc:timepair-get-year-day tp)
-  (gnc:date-get-year-day (gnc:timepair->date tp)))
+(define (gnc:time64-get-year-day t64)
+  (gnc:date-get-year-day (gnc-localtime t64)))
 
 (define (gnc:date-get-year-string datevec)
   (gnc-locale-to-utf8 (strftime "%Y" datevec)))
 
 (define (gnc:date-get-quarter-string datevec)
-  (sprintf #f "Q%d" (gnc:date-get-quarter datevec)))
+  (format #f "Q~d" (gnc:date-get-quarter datevec)))
 
 (define (gnc:date-get-quarter-year-string datevec)
   (string-append 
@@ -105,29 +86,18 @@
   (gnc-locale-to-utf8 (strftime "%B %Y" datevec)))
 
 (define (gnc:date-get-week-year-string datevec)
-  (let ((begin-string (gnc-print-date
-		       (gnc:secs->timepair
-			(+ (* (gnc:date-to-week
-			    (gnc:timepair->secs
-			     (gnc:timepair-start-day-time
-			      (gnc:date->timepair datevec))))
-			   604800 ) 345600))))
-        (end-string (gnc-print-date
-		       (gnc:secs->timepair
-			(+ (* (gnc:date-to-week
-			    (gnc:timepair->secs
-			     (gnc:timepair-start-day-time
-			      (gnc:date->timepair datevec))))
-			   604800 ) 864000)))))
-  (sprintf #f (_ "%s to %s") begin-string end-string)))
+  (let* ((beginweekt64 (* (gnc:time64-get-week
+                            (gnc-mktime datevec))
+                          604800))
+         (begin-string (qof-print-date (+ beginweekt64 345600)))
+         (end-string (qof-print-date (+ beginweekt64 864000))))
+    (format #f (_ "~a to ~a") begin-string end-string)))
 
 ;; is leap year?
 (define (gnc:leap-year? year)
-  (if (= (remainder year 4) 0)
-      (if (= (remainder year 100) 0)
-	  (if (= (remainder year 400) 0) #t #f)
-	  #t)
-      #f))
+  (or (and (zero? (remainder year 4))
+           (not (zero? (remainder year 100))))
+      (zero? (remainder year 400))))
 
 ;; number of days in year
 (define (gnc:days-in-year year)
@@ -198,7 +168,7 @@
   (/ (- (/ (/ caltime 3600.0) 24) 3) 7))
 
 (define (gnc:date-to-week caltime)
-  (quotient (- (quotient caltime 86400) 3) 7))
+  (floor (/ (- (/ caltime 86400) 3) 7)))
 
 ;; convert a date in seconds since 1970 into # of days since Feb 28, 1970
 ;; ignoring leap-seconds
@@ -221,7 +191,7 @@
 
 ;; Modify a date
 (define (moddate op adate delta)
-  (let ((newtm (gnc:timepair->date adate)))
+  (let ((newtm (gnc-localtime adate)))
     (begin
       (set-tm:sec newtm (op (tm:sec newtm) (tm:sec delta)))
       (set-tm:min newtm (op (tm:min newtm) (tm:min delta)))
@@ -230,86 +200,47 @@
       (set-tm:mon newtm (op (tm:mon newtm) (tm:mon delta)))
       (set-tm:year newtm (op (tm:year newtm) (tm:year delta)))
       (set-tm:isdst newtm -1)
-      (gnc:date->timepair newtm))))
+      (gnc-mktime newtm))))
 
 ;; Add or subtract time from a date
-(define (decdate adate delta)(moddate - adate delta ))
-(define (incdate adate delta)(moddate + adate delta ))
-
-;; Time comparison, true if t2 is later than t1
-;; FIXME: RENAME THIS FUNCTION!!!!
-
-(define (gnc:timepair-later t1 t2)
-  (cond ((< (car t1) (car t2)) #t)
-        ((= (car t1) (car t2)) (< (cdr t2) (cdr t2)))
-        (else #f)))
-
-(define gnc:timepair-lt gnc:timepair-later)
-
-(define (gnc:timepair-earlier t1 t2)
-  (gnc:timepair-later t2 t1))
-
-(define (gnc:timepair-gt t1 t2)
-  (gnc:timepair-earlier t1 t2))
-
-;; t1 <= t2
-(define (gnc:timepair-le t1 t2)
-  (cond ((< (car t1) (car t2)) #t)
-        ((= (car t1) (car t2)) (<= (cdr t2) (cdr t2)))
-        (else #f)))
-
-(define (gnc:timepair-ge t1 t2)
-  (gnc:timepair-le t2 t1))
-
-(define (gnc:timepair-eq t1 t2)
-  (and (= (car t1) (car t2)) (= (cdr t1) (cdr t2))))
+(define (decdate adate delta) (moddate - adate delta ))
+(define (incdate adate delta) (moddate + adate delta ))
 
 ;; date-granularity comparison functions.
 
-(define (gnc:timepair-earlier-date t1 t2)
-  (gnc:timepair-earlier (timespecCanonicalDayTime t1)
-			(timespecCanonicalDayTime t2)))
-
-(define (gnc:timepair-later-date t1 t2)
-  (gnc:timepair-earlier-date t2 t1))
-
-(define (gnc:timepair-le-date t1 t2)
-  (gnc:timepair-le (timespecCanonicalDayTime t1)
-		   (timespecCanonicalDayTime t2)))
+(define (gnc:time64-le-date t1 t2)
+  (<= (time64CanonicalDayTime t1)
+      (time64CanonicalDayTime t2)))
 
-(define (gnc:timepair-ge-date t1 t2)
-  (gnc:timepair-le t2 t1))
-
-(define (gnc:timepair-eq-date t1 t2)
-  (gnc:timepair-eq (timespecCanonicalDayTime t1)
-		   (timespecCanonicalDayTime t2)))
+(define (gnc:time64-ge-date t1 t2)
+  (gnc:time64-le-date t2 t1))
 
 ;; Build a list of time intervals. 
 ;;
 ;; Note that the last interval will be shorter than <incr> if
 ;; (<curd>-<endd>) is not an integer multiple of <incr>. If you don't
 ;; want that you'll have to write another function.
-(define (gnc:make-date-interval-list curd endd incr) 
-  (cond ((gnc:timepair-later curd endd)
-	 (let ((nextd (incdate curd incr)))
-	   (cond ((gnc:timepair-later nextd endd)
-		  (cons (list curd (decdate nextd SecDelta) '())
-			(gnc:make-date-interval-list nextd endd incr)))
-		  (else (cons (list curd endd '()) '())))))
-	(else '())))
-
+(define (gnc:make-date-interval-list current-date end-date increment)
+  (if (< current-date end-date)
+      (let ((next-date (incdate current-date increment)))
+        (if (< next-date end-date)
+            (cons (list current-date (decdate next-date SecDelta) '())
+                  (gnc:make-date-interval-list next-date end-date increment))
+            (cons (list current-date end-date '())
+                  '())))
+      '()))
+  
 ;; Build a list of times.  The dates are evenly spaced with the
 ;; stepsize 'incr'. If the difference of 'startdate' and 'enddate' is
 ;; not an integer multiple of 'incr', 'enddate' will be added as the
 ;; last element of the list, thus making the last interval smaller
 ;; than 'incr'.
-(define (gnc:make-date-list startdate enddate incr) 
-  (cond ((gnc:timepair-later startdate enddate)
-	 (cons startdate 
-	       (gnc:make-date-list (incdate startdate incr) 
-				   enddate incr)))
-	(else (list enddate))))
-
+(define (gnc:make-date-list startdate enddate incr)
+  (if (< startdate enddate)
+      (cons startdate
+            (gnc:make-date-list (incdate startdate incr)
+                                enddate incr))
+      (list enddate)))
 
 ; A reference zero date - the Beginning Of The Epoch
 ; Note: use of eval is evil... by making this a generator function, 
@@ -324,7 +255,7 @@
     (set-tm:year zd 0)
     (set-tm:yday zd 0)
     (set-tm:wday zd 0)
-    (set-tm:isdst zd -1)
+    (set-tm:isdst zd 0)
     zd))
 
 
@@ -399,46 +330,31 @@
 	(cdr retval)
 	#f)))
 
-;; Find difference in seconds time 1 and time2
-(define (gnc:timepair-delta t1 t2)
-  (- (gnc:timepair->secs t2) (gnc:timepair->secs t1)))
-
-;; find float difference between times 
-(define (gnc:time-elapsed t1 t2)
-  (+ (- (car t2)
-        (car t1))
-     (/ (- (cdr t2)
-           (cdr t1)) 1000000.0)))
-
-;; timepair manipulation functions
-;; hack alert  - these should probably be put somewhere else
-;; and be implemented PROPERLY rather than hackily
-;;; Added from transaction-report.scm
-
-;; given a timepair contains any time on a certain day (local time)
+;; given a time64 time on a certain day (local time)
 ;; converts it to be midday that day.
 
-(define (gnc:timepair-start-day-time tp)
-  (let ((bdt (gnc:timepair->date tp)))
+(define (gnc:time64-start-day-time t64)
+  (let ((bdt (gnc-localtime t64)))
     (set-tm:sec bdt 0)
     (set-tm:min bdt 0)
     (set-tm:hour bdt 0)
     (set-tm:isdst bdt -1)
-    (gnc:date->timepair bdt)))
+    (gnc-mktime bdt)))
 
-(define (gnc:timepair-end-day-time tp)
-  (let ((bdt (gnc:timepair->date tp)))
+(define (gnc:time64-end-day-time t64)
+  (let ((bdt (gnc-localtime t64)))
     (set-tm:sec bdt 59)
     (set-tm:min bdt 59)
     (set-tm:hour bdt 23)
     (set-tm:isdst bdt -1)
-    (gnc:date->timepair bdt)))
+    (gnc-mktime bdt)))
 
-(define (gnc:timepair-previous-day tp)
-  (decdate tp DayDelta))
+(define (gnc:time64-previous-day t64)
+  (decdate t64 DayDelta))
+
+(define (gnc:time64-next-day t64)
+  (incdate t64 DayDelta))
 
-(define (gnc:timepair-next-day tp)
-  (incdate tp DayDelta))
 
 (define (gnc:reldate-get-symbol x) (vector-ref x 0))
 (define (gnc:reldate-get-string x) (vector-ref x 1))
@@ -486,7 +402,7 @@
     (set-tm:mday now 1)
     (set-tm:mon now 0)
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-cal-year)
   (let ((now (gnc-localtime (current-time))))
@@ -496,7 +412,7 @@
     (set-tm:mday now 31)
     (set-tm:mon now 11)
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-start-prev-year)
   (let ((now (gnc-localtime (current-time))))
@@ -507,7 +423,7 @@
     (set-tm:mon now 0)
     (set-tm:year now (- (tm:year now) 1))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-prev-year)
   (let ((now (gnc-localtime (current-time))))
@@ -518,7 +434,7 @@
     (set-tm:mon now 11)
     (set-tm:year now (- (tm:year now) 1))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-start-next-year)
   (let ((now (gnc-localtime (current-time))))
@@ -529,7 +445,7 @@
     (set-tm:mon now 0)
     (set-tm:year now (+ (tm:year now) 1))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-next-year)
   (let ((now (gnc-localtime (current-time))))
@@ -540,13 +456,13 @@
     (set-tm:mon now 11)
     (set-tm:year now (+ (tm:year now) 1))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-start-accounting-period)
-  (gnc:secs->timepair (gnc-accounting-period-fiscal-start)))
+  (gnc-accounting-period-fiscal-start))
 
 (define (gnc:get-end-accounting-period)
-  (gnc:secs->timepair (gnc-accounting-period-fiscal-end)))
+  (gnc-accounting-period-fiscal-end))
 
 (define (gnc:get-start-this-month)
   (let ((now (gnc-localtime (current-time))))
@@ -555,7 +471,7 @@
     (set-tm:hour now 0)
     (set-tm:mday now 1)
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-this-month)
   (let ((now (gnc-localtime (current-time))))
@@ -565,7 +481,7 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1) 
 					(+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
     
 (define (gnc:get-start-prev-month)
   (let ((now (gnc-localtime (current-time))))
@@ -579,7 +495,7 @@
 	  (set-tm:year now (- (tm:year now) 1)))
 	(set-tm:mon now (- (tm:mon now) 1)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-prev-month)
   (let ((now (gnc-localtime (current-time))))
@@ -594,7 +510,7 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1) 
 					(+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
     
 (define (gnc:get-start-next-month)
   (let ((now (gnc-localtime (current-time))))
@@ -608,7 +524,7 @@
 	  (set-tm:year now (+ (tm:year now) 1)))
 	(set-tm:mon now (+ (tm:mon now) 1)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-next-month)
   (let ((now (gnc-localtime (current-time))))
@@ -623,7 +539,7 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1) 
 					(+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
     
 (define (gnc:get-start-current-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -633,7 +549,7 @@
     (set-tm:mday now 1)
     (set-tm:mon now (- (tm:mon now) (modulo (tm:mon now) 3)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-current-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -645,7 +561,7 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1)
                                         (+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-start-prev-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -660,7 +576,7 @@
 	  (set-tm:year now (- (tm:year now) 1)))
 	(set-tm:mon now (- (tm:mon now) 3)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-prev-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -676,7 +592,7 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1)
                                         (+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-start-next-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -690,7 +606,7 @@
 	  (set-tm:year now (+ (tm:year now) 1)))
         (set-tm:mon now (+ (tm:mon now) (- 3 (modulo (tm:mon now) 3)))))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-end-next-quarter)
   (let ((now (gnc-localtime (current-time))))
@@ -706,10 +622,10 @@
     (set-tm:mday now (gnc:days-in-month (+ (tm:mon now) 1)
                                         (+ (tm:year now) 1900)))
     (set-tm:isdst now -1)
-    (gnc:date->timepair now)))
+    (gnc-mktime now)))
 
 (define (gnc:get-today)
-  (cons (current-time) 0))
+  (current-time))
 
 (define (gnc:get-one-month-ago)
   (let ((now (gnc-localtime (current-time))))
@@ -718,12 +634,12 @@
 	  (set-tm:mon now 11)
 	  (set-tm:year now (- (tm:year now) 1)))
 	(set-tm:mon now (- (tm:mon now) 1)))
-    (let ((month-length (gnc:days-in-month (+ (tm:mon now) 1)
-                                           (+ (tm:year now) 1900))))
-      (if (> month-length (tm:mday now))
-	  (set-tm:mday now month-length))
+    (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
+                                         (+ (tm:year now) 1900))))
+      (if (< month-days (tm:mday now))
+	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-three-months-ago)
   (let ((now (gnc-localtime (current-time))))
@@ -734,10 +650,10 @@
     (set:tm-mon now (- (tm:mon now) 3))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-six-months-ago)
   (let ((now (gnc-localtime (current-time))))
@@ -748,20 +664,20 @@
     (set:tm-mon now (- (tm:mon now) 6))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-one-year-ago)
   (let ((now (gnc-localtime (current-time))))
     (set:tm-year now (- (tm:year now) 1))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
-                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+                                         (+ (tm:year now) 1900))))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-one-month-ahead)
   (let ((now (gnc-localtime (current-time))))
@@ -770,12 +686,12 @@
 	  (set-tm:mon now 0)
 	  (set-tm:year now (+ (tm:year now) 1)))
 	(set-tm:mon now (+ (tm:mon now) 1)))
-    (let ((month-length (gnc:days-in-month (+ (tm:mon now) 1)
-                                           (+ (tm:year now) 1900))))
-      (if (> month-length (tm:mday now))
-	  (set-tm:mday now month-length))
+    (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
+                                         (+ (tm:year now) 1900))))
+      (if (< month-days (tm:mday now))
+	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-three-months-ahead)
   (let ((now (gnc-localtime (current-time))))
@@ -783,13 +699,13 @@
 	(begin
 	  (set:tm-mon now (- (tm:mon now) 9))
 	  (set:tm-year now  (+ (tm:year now) 1))
-       (set:tm-mon now (+ (tm:mon now) 3))))
+          (set:tm-mon now (+ (tm:mon now) 3))))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-six-months-ahead)
   (let ((now (gnc-localtime (current-time))))
@@ -797,23 +713,23 @@
 	(begin
 	  (set:tm-mon now (- (tm:mon now) 6))
 	  (set:tm-year now  (+ (tm:year now) 1))
-       (set:tm-mon now (+ (tm:mon now) 6))))
+          (set:tm-mon now (+ (tm:mon now) 6))))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 (define (gnc:get-one-year-ahead)
   (let ((now (gnc-localtime (current-time))))
     (set:tm-year now (+ (tm:year now) 1))
     (let ((month-days (gnc:days-in-month (+ (tm:mon now) 1)
-                                          (+ (tm:year now) 1900))))
-      (if (> month-days (tm:mday now))
+                                         (+ (tm:year now) 1900))))
+      (if (< month-days (tm:mday now))
 	  (set-tm:mday now month-days))
       (set-tm:isdst now -1)
-      (gnc:date->timepair now))))
+      (gnc-mktime now))))
 
 ;; There is no GNC:RELATIVE-DATES list like the one mentioned in
 ;; gnucash-design.info, is there? Here are the currently defined
