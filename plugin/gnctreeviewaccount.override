%%
headers
#include <Python.h>

#include "config.h"

#include "pygobject.h"

#include "glib.h"

#include "gtk/gtk.h"

#include "gnc-plugin-page.h"

#include "gnc-tree-view-account.h"

#include "gnc-gnome-utils.h"

#include "Account.h"

%%
modulename gnctreeviewaccount
%%
import gobject.GObject as PyGObject_Type
import gtk.UIManager as PyGtkUIManager_Type
import gtk.Window as PyGtkWindow_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.TreePath as PyGtkTreePath_Type
import gtk.TreeModel as PyGtkTreeModel_Type
import gtk.ActionGroup as PyGtkActionGroup_Type
import gtk.TreeViewColumn as PyGtkTreeViewColumn_Type
import gtk.ToggleButton as PyGtkToggleButton_Type
import pygkeyfile.GKeyFile as PyGKeyFile_Type
import gncpluginpage.PluginPage as PyGncPluginPage_Type
%%
ignore-glob
  *_get_type
ignore col_source_helper
ignore gnc_tree_view_account_filter_helper
ignore get_selected_accounts_helper

%%
override gnc_tree_view_account_set_selected_accounts kwargs

static PyObject *
_wrap_gnc_tree_view_account_set_selected_accounts(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "account_list", "show_last", NULL };
    PyObject *py_account_list;
    int show_last;
    gpointer account_list;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Oi:Gnc.TreeViewAccount.set_selected_accounts", kwlist, &py_account_list, &show_last))
        return NULL;
    account_list = (GList *)(((PyGPointer *)(py_account_list))->pointer);

    gnc_tree_view_account_set_selected_accounts(GNC_TREE_VIEW_ACCOUNT(self->obj), account_list, show_last);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override gnc_tree_view_account_add_custom_column kwargs

gchar *
generic_source_cb(Account *account, GtkTreeViewColumn *col, GtkCellRenderer *cell)
{
//typedef gchar * (*GncTreeViewAccountColumnSource) (Account *account,
//        GtkTreeViewColumn *col,
//        GtkCellRenderer *cell);

    // OK - so how to handle this - we need to return an account
    // - what

    PyGILState_STATE state;
    PyObject *callback, *args, *ret;

    state = pyg_gil_state_ensure();
    PyObject *user_data = g_object_get_data(G_OBJECT(col), "column_edited_python_data");
    callback = PyTuple_GetItem((PyObject *)user_data, 1);
    args = Py_BuildValue("(OOO)",
                         pygobject_new((GObject *)account),
                         pygobject_new((GObject *)col),
                         pygobject_new((GObject *)cell));
    ret = PyObject_CallObject(callback, args);
    if (!ret)
        PyErr_Print();
    Py_XDECREF(ret);
    Py_DECREF(args);
    Py_DECREF((PyObject *)user_data);
    pyg_gil_state_release(state);

}

gchar *
generic_edited_cb(gpointer data)
{
typedef void (*GncTreeViewAccountColumnTextEdited) (Account *account,
        GtkTreeViewColumn *col,
        const gchar *new_text);
}

static PyObject *
_wrap_gnc_tree_view_account_add_custom_column(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "column_title", "source_cb", "edited_cb", NULL };
    char *column_title;
    PyObject *py_source_cb, *py_edited_cb;
    GncTreeViewAccountColumnTextEdited edited_cb;
    GncTreeViewAccountColumnSource source_cb;
    GtkTreeViewColumn *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sOO:Gnc.TreeViewAccount.add_custom_column", kwlist, &column_title, &py_source_cb, &py_edited_cb))
        return NULL;
    if (!PyCallable_Check(py_source_cb)) {
        PyErr_SetString(PyExc_TypeError, "source callback must be callable");
        return NULL;
    }
    if (!PyCallable_Check(py_edited_cb)) {
        PyErr_SetString(PyExc_TypeError, "edited callback must be callable");
        return NULL;
    }

    PyObject *source_data = Py_BuildValue("(OO)", py_source_cb, self);
    PyObject *edited_data = Py_BuildValue("(OO)", py_edited_cb, self);

    ret = gnc_tree_view_account_add_custom_column(GNC_TREE_VIEW_ACCOUNT(self->obj), column_title, source_cb, edited_cb);

    if (!ret) {
        Py_DECREF(source_data);
        Py_DECREF(edited_data);
    } else {
        g_object_set_data(G_OBJECT(ret), "column_source_python_data", source_data);
        g_object_set_data(G_OBJECT(ret), "column_edited_python_data", edited_data);
    }

    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

