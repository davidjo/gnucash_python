<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="QofCollection" version="0.1"/>
  <include name="QofId" version="0.1"/>
  <include name="QofInstanceType" version="0.1"/>
  <namespace name="QofBook"
             version="0.1"
             shared-library="/opt/local/lib/libgnc-qof.1.dylib"
             c:identifier-prefixes="Qof"
             c:symbol-prefixes="qof">
    <alias name="BookList" c:type="QofBookList">
      <type name="GLib.List" c:type="GList"/>
    </alias>
    <class name="Book"
           c:symbol-prefix="book"
           c:type="QofBook"
           parent="QofInstanceType.Instance"
           glib:type-name="QofBook"
           glib:get-type="qof_book_get_type"
           glib:type-struct="BookClass">
      <constructor name="new" c:identifier="qof_book_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #QofBook</doc>
          <type name="Book" c:type="QofBook*"/>
        </return-value>
      </constructor>
      <function name="register" c:identifier="qof_book_register">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="validate_counter_format"
                c:identifier="qof_book_validate_counter_format">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="begin_edit" c:identifier="qof_book_begin_edit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="commit_edit" c:identifier="qof_book_commit_edit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="qof_book_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook
    End any editing sessions associated with book, and free all memory
    associated with it.</doc>
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach_collection"
              c:identifier="qof_book_foreach_collection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
          <parameter name="cb"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">callback</doc>
            <type name="CollectionForeachCB" c:type="QofCollectionForeachCB"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">A gpointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_autoreadonly_gdate"
              c:identifier="qof_book_get_autoreadonly_gdate">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">date pointer

 Returns the GDate that is the threshold for auto-read-only. Any txn
with posted-date lesser than this date should be considered read-only.

If the auto-read-only feature is not used (qof_book_uses_autoreadonly()
returns FALSE), NULL is returned here.

The returned object was allocated newly; the caller must
g_date_free() the object afterwards.</doc>
          <type name="GLib.Date" c:type="GDate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_collection"
              c:identifier="qof_book_get_collection"
              introspectable="0">
        <doc xml:space="preserve">Return The table of entities of the given type.

 When an object's constructor calls qof_instance_init(), a
 reference to the object is stored in the book.  The book stores
 all the references to initialized instances, sorted by type.  This
 function returns a collection of the references for the specified
 type.

 If the collection doesn't yet exist for the indicated type,
 it is created.  Thus, this routine is gaurenteed to return
 a non-NULL value.  (Unless the system malloc failed (out of
 memory) in which case what happens??).</doc>
        <return-value>
          <type name="QofCollection.Collection" c:type="QofCollection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
          <parameter name="entity_type" transfer-ownership="none">
            <doc xml:space="preserve">A #QofIdType</doc>
            <type name="QofCollection.IdType" c:type="QofIdType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_counter" c:identifier="qof_book_get_counter">
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="counter_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_counter_format"
              c:identifier="qof_book_get_counter_format">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
          <parameter name="counter_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="qof_book_get_data">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">gpointer

 Retrieves arbitrary pointers to structs stored by qof_book_set_data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_num_days_autoreadonly"
              c:identifier="qof_book_get_num_days_autoreadonly">
        <doc xml:space="preserve">Returns the number of days for auto-read-only transactions. If zero,
the auto-read-only feature should be disabled (and qof_book_uses_autoreadonly()
returns FALSE).</doc>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_dirty_time"
              c:identifier="qof_book_get_session_dirty_time"
              introspectable="0">
        <return-value>
          <type c:type="time64"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slots"
              c:identifier="qof_book_get_slots"
              introspectable="0">
        <return-value>
          <type name="KvpFrame.KvpFrame" c:type="KvpFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string_option"
              c:identifier="qof_book_get_string_option">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
          <parameter name="opt_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="increment_and_format_counter"
              c:identifier="qof_book_increment_and_format_counter">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="counter_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_readonly" c:identifier="qof_book_is_readonly">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">True if book read only

 Return whether the book is read only.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="kvp_changed" c:identifier="qof_book_kvp_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_closed" c:identifier="qof_book_mark_closed">
        <doc xml:space="preserve">It is up to the application to check this flag,
and once marked closed, books cannnot be marked as open.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook
 Close a book to editing.</doc>
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_readonly" c:identifier="qof_book_mark_readonly">
        <doc xml:space="preserve">Mark the book as read only.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_session_dirty"
              c:identifier="qof_book_mark_session_dirty">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_session_saved"
              c:identifier="qof_book_mark_session_saved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="session_not_saved"
              c:identifier="qof_book_session_not_saved">
        <doc xml:space="preserve">qof_book_not_saved() returns the value of the session_dirty flag,
set when changes to any object in the book are committed
(qof_backend-&gt;commit_edit has been called) and the backend hasn't
yet written out the changes. (Note that SQL backends write commits
out immediately; file backends don't, and use the flag to control
an autosave timer.)</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="qof_book_set_data">
        <doc xml:space="preserve">The qof_book_set_data() allows arbitrary pointers to structs
   to be stored in QofBook. This is the "preferred" method for
   extending QofBook to hold new data types.  This is also
   the ideal location to store other arbitrary runtime data
   that the application may need.

   The book data differs from the book KVP in that the contents
   of the book KVP are persistent (are saved and restored to file
   or database), whereas the data pointers exist only at runtime.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">gpointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_fin" c:identifier="qof_book_set_data_fin">
        <doc xml:space="preserve">Same as qof_book_set_data(), except that the callback will be called
 when the book is destroyed.  The argument to the callback will be
 the book followed by the data pointer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">gpointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cb" transfer-ownership="none" scope="notified">
            <doc xml:space="preserve">callback</doc>
            <type name="BookFinalCB" c:type="QofBookFinalCB"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty_cb"
              c:identifier="qof_book_set_dirty_cb"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="cb" transfer-ownership="none" closure="1">
            <type name="BookDirtyCB" c:type="QofBookDirtyCB"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_option"
              c:identifier="qof_book_set_string_option">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <type name="Book" c:type="QofBook*"/>
          </instance-parameter>
          <parameter name="opt_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="opt_val" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutting_down" c:identifier="qof_book_shutting_down">
        <doc xml:space="preserve">Is the book shutting down?</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_split_action_for_num_field"
              c:identifier="qof_book_use_split_action_for_num_field">
        <doc xml:space="preserve">Returns TRUE if this book uses split action field as the 'Num' field, FALSE
 if it uses transaction number field</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="use_trading_accounts"
              c:identifier="qof_book_use_trading_accounts">
        <doc xml:space="preserve">Returns flag indicating whether this book uses trading accounts</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="uses_autoreadonly"
              c:identifier="qof_book_uses_autoreadonly">
        <doc xml:space="preserve">Returns TRUE if the auto-read-only feature should be used, otherwise
FALSE. This is just a wrapper on qof_book_get_num_days_autoreadonly() == 0.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">A #QofBook</doc>
            <type name="Book" c:type="const QofBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="inst">
        <type name="QofInstanceType.Instance" c:type="QofInstance"/>
      </field>
      <field name="session_dirty">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="dirty_time" introspectable="0">
        <type c:type="time64"/>
      </field>
      <field name="dirty_cb">
        <type name="BookDirtyCB" c:type="QofBookDirtyCB"/>
      </field>
      <field name="dirty_data">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="hash_of_collections">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="data_tables">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="data_table_finalizers">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="read_only">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="book_open">
        <type name="gchar" c:type="char"/>
      </field>
      <field name="shutting_down">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="version">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="backend" introspectable="0">
        <type c:type="QofBackend*"/>
      </field>
    </class>
    <record name="BookClass"
            c:type="QofBookClass"
            glib:is-gtype-struct-for="Book">
      <field name="parent_class">
        <type name="QofInstanceType.InstanceClass" c:type="QofInstanceClass"/>
      </field>
    </record>
    <callback name="BookDirtyCB" c:type="QofBookDirtyCB">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="book" transfer-ownership="none">
          <type name="Book" c:type="QofBook*"/>
        </parameter>
        <parameter name="dirty" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BookFinalCB" c:type="QofBookFinalCB">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="book" transfer-ownership="none">
          <type name="Book" c:type="QofBook*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="CollectionForeachCB" c:type="QofCollectionForeachCB">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="book" transfer-ownership="none">
          <type name="QofCollection.Collection" c:type="QofCollection*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
  </namespace>
</repository>
